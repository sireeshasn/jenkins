pipeline {
    agent any
    
    stages {
        stage('Build') {
            steps {
                // Use Maven to build the code
                sh 'mvn clean package'
            }
        }
        
        stage('Unit and Integration Tests') {
            steps {
                // Run unit tests
                sh 'mvn test'
                
                // Run integration tests
                // You may need to start your application and then run the tests
                sh 'mvn integration-test'
            }
        }
        
        stage('Code Analysis') {
            steps {
                // Integrate with SonarQube for code analysis
                // This requires SonarQube server running and Jenkins integration
                // Example:
                sh 'sonar-scanner'
            }
        }
        
        stage('Security Scan') {
            steps {
                // Perform security scan using OWASP Dependency-Check
                // Example:
                sh 'dependency-check.sh -o /output/directory'
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                // Deploy to AWS EC2 staging server using AWS CLI or Jenkins AWS plugin
                // Example:
                sh 'aws s3 cp ./target/app.jar s3://staging-bucket/'
                sh 'aws deploy --region us-east-1 --application myApp --deployment-group staging --s3-location bucket=staging-bucket,bundleType=zip,key=app.jar'
            }
        }
        
        stage('Integration Tests on Staging') {
            steps {
                // Run integration tests on the staging environment
                // Example:
                sh 'mvn integration-test -Denv=staging'
            }
        }
        
        stage('Deploy to Production') {
            steps {
                // Deploy to AWS EC2 production server
                // Example:
                sh 'aws s3 cp ./target/app.jar s3://production-bucket/'
                sh 'aws deploy --region us-east-1 --application myApp --deployment-group production --s3-location bucket=production-bucket,bundleType=zip,key=app.jar'
            }
        }
    }
    
    post {
        success {
            // Send success email notification
            emailext(
                subject: "Pipeline Status: Success",
                body: "The pipeline completed successfully.",
                to: "sireesha2622@gmail.com"
            )
        }
        failure {
            // Send failure email notification with logs attached
            emailext(
                subject: "Pipeline Status: Failure",
                body: "The pipeline failed. See attached logs for details.",
                to: "sireesha2622@gmail.com",
                attachLog: true
            )
        }
    }
}
